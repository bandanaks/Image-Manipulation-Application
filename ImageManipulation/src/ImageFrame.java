/*
	A basic extension of the java.awt.Frame class
 */

import java.awt.*;
import java.io.*;
import java.awt.image.*;

import javax.imageio.ImageIO;
import javax.swing.*;

//import symantec.itools.multimedia.ImageViewer;
public class ImageFrame extends Frame
{
   
    Image img;  //spatial image
    
    Image ActiveImage;
    Image BackupImage;
    
    boolean verbose=false;
    
    Image icon = Toolkit.getDefaultToolkit().getImage(".\\src\\colors.png");
    
    
	public ImageFrame()
	{
	    
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setLayout(null);
		setBackground(java.awt.Color.white);
		setForeground(java.awt.Color.black);
		setSize(281,285);
		setVisible(false);
		button_Hide.setLabel("Hide");
		add(button_Hide);
		button_Hide.setBackground(java.awt.Color.lightGray);
		button_Hide.setBounds(0,0,48,24);
		add(imageViewer);
		imageViewer.setBounds(36,36,195,168);
		saveFileDialog1.setMode(FileDialog.SAVE);
		saveFileDialog1.setTitle("Save");
		saveFileDialog1.setFile("*.raw");
		//$$ saveFileDialog1.move(0,0);
		saveFileDialog2.setMode(FileDialog.SAVE);
		saveFileDialog2.setTitle("Save As..");
		saveFileDialog2.setFile("ImageApplication.filename");
		
		setTitle("Chosen Image");
		setIconImage(icon);
		//}}

		//{{INIT_MENUS
		menu1.setLabel("File");
		//menu1.add(miSaveExisting);
		//miSaveExisting.setLabel("Save (Overwrite)");
		menu1.add(miSave);
		miSave.setLabel("Save Raw Data");
		miSave.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_S,false));
		menu1.add(saveAsMenuItem);
		saveAsMenuItem.setLabel("Save As...");
		saveAsMenuItem.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_A, false));
		menu1.add(miHide);
		miHide.setLabel("Hide");
		mainMenuBar.add(menu1);
		//$$ mainMenuBar.move(48,0);
		
		menu2.setLabel("Edit");
		menu2.add(miUndo);
		miUndo.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_Z, false));
		miUndo.setEnabled(false);
		miUndo.setLabel("Undo");
		mainMenuBar.add(menu2);
		
		menu3.setLabel("Process");
		menu3.add(miThreshold);
		miThreshold.setLabel("Threshold");
		menu3.add(miNegative);
		miNegative.setLabel("Negative");
		menu3.add(miEdgeDetect);
		miEdgeDetect.setLabel("Edge Detect");
		menu3.add(miContrastStretch);
		miContrastStretch.setLabel("Contrast Stretch");
		mainMenuBar.add(menu3);
		
		setMenuBar(mainMenuBar);
		//}}

		//{{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymAction lSymAction = new SymAction();
		button_Hide.addActionListener(lSymAction);
		//miSaveExisting.addActionListener(lSymAction);
		miSave.addActionListener(lSymAction);
		saveAsMenuItem.addActionListener(lSymAction);
		miHide.addActionListener(lSymAction);
		miUndo.addActionListener(lSymAction);
		miThreshold.addActionListener(lSymAction);
		miNegative.addActionListener(lSymAction);
		miEdgeDetect.addActionListener(lSymAction);
		miContrastStretch.addActionListener(lSymAction);
		SymItem lSymItem = new SymItem();
		//}}
	}

	public ImageFrame(String title)
	{
		this();
		setTitle(title);
	}
	/**
	 *Stores the spatial image in case want to toggle
	 * the display between this and wavelet image
	 */
	public void setImage(Image image)
	{  img = image;
		BackupImage = img;
		
	System.out.println("Going to set image)");
	   try{
		   ImageIcon imageIcon = new ImageIcon(image);
	       
		   imagejLabel.setIcon(imageIcon);
		   imagejLabel.setSize(image.getWidth(this),image.getHeight(this));
		 
		

	  //  imageViewer.setImage(img);
	      imageViewer.removeAll();
	      imageViewer.add(imagejLabel);
	      imageViewer.validate();
	    }catch(Exception e)
	    { }
	    try{
	        imageViewer.setSize(img.getWidth(this),img.getHeight(this));
	        this.setSize(img.getWidth(this)+200, img.getHeight(this)+200);
	        repaint();       
	    } catch(Exception e) {}   
	}    
	
	
	   
	   
	/**
	 *Stores the currently displayed image data into
	 * a file as raw GREYSCALE image data format
	 */
	public void storeGreyscaleImage(String filename)throws IOException
	{ 
	  
	    int rows, cols, pixel, alpha, red, green,blue;
	    
	    
            
	        
        //Open up file	
        FileOutputStream file_output = new FileOutputStream(filename);
        DataOutputStream DO = new DataOutputStream(file_output);
 
 
        //Write out each pixel as integers
        rows = img.getHeight(this);
        cols = img.getWidth(this);
        int pixels[] = new int[rows*cols];
        PixelGrabber pg = new PixelGrabber(img, 0,0, cols, rows, pixels, 0, rows);
        try{ pg.grabPixels();}
        catch(InterruptedException e) {
    	    System.err.println("interrupted waiting for pixels!");
    	}
	
         
        for(int r=0; r<rows; r++)
	    for(int c=0; c<cols; c++) {
            pixel = pixels[r*cols + c];
	        alpha = (pixel >> 24) & 0xff;
            red   = (pixel >> 16) & 0xff;
            green = (pixel >>  8) & 0xff;
            blue  = (pixel      ) & 0xff;
            
            if(verbose)
    	        {System.out.println("value: " + (int)((red+green+blue)/3));
    	         System.out.println(" R,G,B: " + red +"," + green +"," + blue); }
	   
 	        DO.writeByte((int)((red+green+blue)/3));	
 	        
        }	

        //flush Stream
        DO.flush();
        //close Stream
        DO.close();

    }
    
    
    /**
	 *Stores the currently displayed image data into
	 * a file as COLOR raw image data format
	 */
	public void storeColorImage(String filename)throws IOException
	{ 
	    
	    int rows, cols, pixel, alpha, red, green,blue;
	    
	   
            
	        
        //Open up file	
        FileOutputStream file_output = new FileOutputStream(filename);
        DataOutputStream DO = new DataOutputStream(file_output);
 
 
        //Write out each pixel as integers
        rows = img.getHeight(this);
        cols = img.getWidth(this);
        int pixels[] = new int[rows*cols];
        PixelGrabber pg = new PixelGrabber(img, 0,0, cols, rows, pixels, 0, cols);
        try{ pg.grabPixels();}
        catch(InterruptedException e) {
    	    System.err.println("interrupted waiting for pixels!");
    	}
	
        System.out.println("...storing as color, "+rows +" x " + cols);
        
        for(int r=0; r<rows; r++)
	    for(int c=0; c<cols; c++) {
            pixel = pixels[r*cols + c];
	        alpha = (pixel >> 24) & 0xff;
            red   = (pixel >> 16) & 0xff;
            green = (pixel >>  8) & 0xff;
            blue  = (pixel      ) & 0xff;
            if(verbose)//verbose
    	        {System.out.println("value: " + (int)((red+green+blue)/3));
    	         System.out.println(" R,G,B: " + red +"," + green +"," + blue); }
	   
 	        DO.writeByte(red);
 	        DO.writeByte(green);
 	        DO.writeByte(blue);
        }	

        //flush Stream
        DO.flush();
        //close Stream
        DO.close();

    }
    
	
	public void saveToFile(Image image /*String filename*/)throws IOException
	{
		   BufferedImage bufferedI = new BufferedImage(image.getWidth(null), image.getHeight(null), BufferedImage.TYPE_BYTE_GRAY);
		   bufferedI.getGraphics().drawImage(image, 0, 0, null);
		   
		   Graphics g = bufferedI.createGraphics();
		   g.drawImage(image, 0, 0, null);
		   g.dispose();
		   
		   String SaveAs_filename = (saveFileDialog2.getDirectory()).concat(saveFileDialog2.getFile()); 
		   System.out.println("Save info: " + SaveAs_filename);
			
		   try {
			   ImageIO.write(bufferedI, "jpg", new File(SaveAs_filename));
		   }
		   catch (Exception e) {
			   
		   }
	}

    /**
     * Shows or hides the component depending on the boolean flag b.
     * @param b  if true, show the component; otherwise, hide the component.
     * @see java.awt.Component#isVisible
     */
    public void setVisible(boolean b)
	{
		if(b)
		{
			setLocation(50, 50);
		}
		super.setVisible(b);
	}

	static public void main(String args[])
	{
		(new ImageFrame()).setVisible(true);
	}
	
	public void addNotify()
	{
	    // Record the size of the window prior to calling parents addNotify.
	    Dimension d = getSize();
	    
		super.addNotify();

		if (fComponentsAdjusted)
			return;

		// Adjust components according to the insets
		setSize(insets().left + insets().right + d.width, insets().top + insets().bottom + d.height);
		Component components[] = getComponents();
		for (int i = 0; i < components.length; i++)
		{
			Point p = components[i].getLocation();
			p.translate(insets().left, insets().top);
			components[i].setLocation(p);
		}
		fComponentsAdjusted = true;
	}

    // Used for addNotify check.
	boolean fComponentsAdjusted = false;

	//{{DECLARE_CONTROLS
	java.awt.Button button_Hide = new java.awt.Button();
	//symantec.itools.multimedia.ImageViewer imageViewer = new symantec.itools.multimedia.ImageViewer();
	javax.swing.JScrollPane imageViewer = new javax.swing.JScrollPane();
	javax.swing.JLabel imagejLabel = new JLabel();
	java.awt.FileDialog saveFileDialog1 = new java.awt.FileDialog(this);
	java.awt.FileDialog saveFileDialog2 = new java.awt.FileDialog(this);
	

	//}}

	//{{DECLARE_MENUS
	java.awt.MenuBar mainMenuBar = new java.awt.MenuBar();
	java.awt.Menu menu1 = new java.awt.Menu();
	//java.awt.MenuItem miSaveExisting = new java.awt.MenuItem();
	java.awt.MenuItem miSave = new java.awt.MenuItem();
	java.awt.MenuItem saveAsMenuItem = new java.awt.MenuItem();
	java.awt.MenuItem miHide = new java.awt.MenuItem();
	
	java.awt.Menu menu2 = new java.awt.Menu();
	java.awt.MenuItem miUndo = new java.awt.MenuItem();
	
	java.awt.Menu menu3 = new java.awt.Menu();
	java.awt.MenuItem miThreshold = new java.awt.MenuItem();
	java.awt.MenuItem miNegative = new java.awt.MenuItem();
	java.awt.MenuItem miEdgeDetect = new java.awt.MenuItem();
	java.awt.MenuItem miContrastStretch = new java.awt.MenuItem();
	//}}

	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowOpened(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == ImageFrame.this)
				ImageFrame_WindowOpened(event);
		}

		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == ImageFrame.this)
				Frame1_WindowClosing(event);
		}
	}
	
	void Frame1_WindowClosing(java.awt.event.WindowEvent event)
	{
		setVisible(false);		 // hide the Frame
	}

	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == button_Hide)
				buttonHide_ActionPerformed(event);
			//else if (object == miSaveExisting)
				//miSaveExisting_ActionPerformed(event);
			else if (object == miSave)
				miSave_ActionPerformed(event);
			else if (object == saveAsMenuItem)
				saveAsMenuItem_ActionPerformed(event);
			else if (object == miHide)
				miHide_ActionPerformed(event);
			else if (object == miUndo)
				miUndo_ActionPerformed(event);
			else if (object == miThreshold)
				miThreshold_ActionPerformed(event);
			else if (object == miNegative)
				miNegative_ActionPerformed(event);
			else if (object == miEdgeDetect)
				miEdgeDetect_ActionPerformed(event);
			else if (object == miContrastStretch)
				miContrastStretch_ActionPerformed(event);
			
		}
	}

	void buttonHide_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		//{{CONNECTION
		// Hide the Frame
		setVisible(false);
		//}}
	}

	
	
    /**
      *Save Image data in raw format
      */
	void miSave_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
		String Save_filename;	 
			 
		//{{CONNECTION
		// Show the SaveFileDialog
		saveFileDialog1.setVisible(true);
		//}}
		
		//GET FILENAME
		Save_filename = (saveFileDialog1.getDirectory()).concat(saveFileDialog1.getFile()); 
		System.out.println("Save info: " + Save_filename); 
		
		//Store currently displayed info
		try {
    		storeColorImage(Save_filename);
        } catch (IOException e)
        {}
		
	}
	
	/**
	 * Saves the image to the filename specified by the user.
	 * Which can either be overwriting an already existing image or creating a new file with
	 * a new name not yet used.
	 * @param event
	 */
	void saveAsMenuItem_ActionPerformed(java.awt.event.ActionEvent event)
	{
		String SaveAs_filename;
		
		saveFileDialog2.setVisible(true);
		
		/*SaveAs_filename = (saveFileDialog2.getDirectory()).concat(saveFileDialog2.getFile()); 
		System.out.println("Save info: " + SaveAs_filename); */
		
		try {
			saveToFile(img);
		} catch (IOException e)
		{ }
		
		
	}

	void miHide_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		//{{CONNECTION
		// Hide the Frame
		setVisible(false);
		//}}
	}
	
	
	
	/**
	 * This operation allows the user to undo the very last operation 
	 * done on the image. It is not enabled until an operation is chosen. 
	 * It is also disabled after it has been used, until a new operation is chosen.
	 * @param event
	 */
	void miUndo_ActionPerformed(java.awt.event.ActionEvent event) 
	{
		/*ImageApplication.img1 = ImageApplication.BackupI2;
		ImageApplication.BackupI = ImageApplication.ActiveI;
		setImage(ImageApplication.ActiveI);
		setVisible(true);
		*/
		
		setImage(ImageApplication.ActiveI);
		setVisible(true);	
		
		// disable again until next operation is chosen
		miUndo.setEnabled(false);
		
		
	}
	
	
	/**
	 * This operation allows the user to threshold the image by the
	 * user specified value. It makes sure the value is within the 
	 * range of 0 and 255. If not, it displays an error message.
	 * @param event
	 */
	void miThreshold_ActionPerformed(java.awt.event.ActionEvent event)
	{
		int value = Integer.parseInt(JOptionPane.showInputDialog("Enter threshold value between 0 & 255"));
		ImageApplication.img_data.threshold(value);
		
		if (value < 0 || value > 255)
		{
			String message = "Invalid threshold value!";
			String title = "Invalid Entry";
			JOptionPane.showMessageDialog(this, message, title, JOptionPane.ERROR_MESSAGE);
		}
		else {
		Image img1 = ImageApplication.img_data.createImage();
		setImage(img1);
		setVisible(true);
		
		
		miUndo.setEnabled(true);
		}
	}
	
	
	/**
	 * This operation allows the user to perform a negative
	 * on the image.
	 * @param event
	 */
	void miNegative_ActionPerformed(java.awt.event.ActionEvent event)
	{
		ImageApplication.img_data.negative();
		Image img1 = ImageApplication.img_data.createImage();
		setImage(img1);
		setVisible(true);
		
		miUndo.setEnabled(true);
	}
	
	
	/**
	 * This operation performs edge detection on the image.
	 * @param event
	 */
	void miEdgeDetect_ActionPerformed(java.awt.event.ActionEvent event)
	{
		ImageApplication.img_data.edgeDetect(img);
		Image img1 = ImageApplication.img_data.createImage();
		setImage(img1);
		setVisible(true);
		
		miUndo.setEnabled(true);
	}
	
	
	/**
	 * This operation performs contrast stretch on the image.
	 * @param event
	 */
	void miContrastStretch_ActionPerformed(java.awt.event.ActionEvent event)
	{
		int value = Integer.parseInt(JOptionPane.showInputDialog("Enter contrast stretch value"));
		ImageApplication.img_data.contrastStretch(value);
		
		Image img1 = ImageApplication.img_data.createImage();
		setImage(img1);
		setVisible(true);
		
		miUndo.setEnabled(true);
	}

	
	class SymItem implements java.awt.event.ItemListener
	{
		public void itemStateChanged(java.awt.event.ItemEvent event)
		{
		}
	}
	

	void ImageFrame_WindowOpened(java.awt.event.WindowEvent event)
	{
		// to do: code goes here.
	}
}